import 'dart:async';
import 'package:artrit/data/data_chat_add_message.dart';
import 'package:artrit/theme.dart';
import 'package:artrit/widget_another/chat_message_widget.dart';
import 'package:artrit/widgets/show_message.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import '../api/api_chat.dart';
import '../data/data_chat_contacts.dart';
import '../data/data_chat_file_send.dart';
import '../data/data_chat_info.dart';
import '../data/data_chat_message.dart';
import '../data/data_chat_messages.dart';
import '../data/data_chat_templates.dart';
import '../data/data_result.dart';
import '../my_functions.dart';
import '../roles.dart';
import '../secure_storage.dart';
import '../widget_another/chat_divider_new_message_widget.dart';
import '../widget_another/chat_divider_widget.dart';
import '../widget_another/chat_file_preview_widget.dart';
import '../widget_another/chat_file_upload_progress_widget.dart';
import '../widget_another/chat_message_input_panel.dart';
import '../widget_another/chat_politic.dart';
import '../widget_another/chat_status_banner.dart';
import '../widgets/app_bar_widget.dart';
import '../widgets/banners.dart';
import '../widget_another/chat_options_menu.dart';
import '../widgets/chat_provider.dart';
import '../widgets/download_file_widget.dart';
import '../widgets/file_picker_widget.dart';
import '../widgets/show_dialog_confirm.dart';
import 'menu.dart';
import 'package:grouped_list/grouped_list.dart';


class PageChatMessages extends StatefulWidget {
  final ResultContacts contact;

  const PageChatMessages({
    super.key,
    required this.contact,
  });

  @override
  PageChatMessagesState createState() => PageChatMessagesState();
}

class PageChatMessagesState extends State<PageChatMessages> {
  late Future<void> _future;

  /// API
  final ApiChat _api = ApiChat();

  /// –î–∞–Ω–Ω—ã–µ
  DataChatInfo? _chatInfo;
  DataChatTemplates? _chatTemplates;
  List<TemplatesResult> _templates = [];

  /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
  late int _role;
  late String _ssId;
  late String _chatId;
  late bool _isChatClosed = true;
  late bool _allowByDoctor = false;
  late bool _allowByPatient = false;
  late String _userId;
  bool _isFileSending = false;
  final ScrollController _scrollController = ScrollController();
  final TextEditingController _textController = TextEditingController();
  List<FileElement> _fileElements = [];
  List<FileItems> _fileItems = [];
  int _currentFileIndex = 0;
  double? _progress;
  int _firstMessageId = 0;
  int _lastMessageId = 0;
  late String _acceptMessage = '–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π —á–∞—Ç–∞';
  final FocusNode _focusNode = FocusNode();

  /// –¢–∞–π–º–µ—Ä—ã
  /// –¢–∞–π–º–µ—Ä –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  Timer? _renderStabilizationTimer;


  /// –°–ª—É—à–∞—Ç–µ–ª–∏
  /// –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
  late ValueNotifier<List<Message>> _messagesNotifier;
  /// –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
  late ValueNotifier<bool> _sendVisibilityNotifier;
  /// –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  late ValueNotifier<bool> _isLoadingHistoryNotifier;
  /// –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  late ValueNotifier<bool> _isLoadingMessagesNotifier;
  /// –î–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  late ValueNotifier<bool> _isNewMessagesNotifier;
  /// –î–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞
  late ValueNotifier<bool> _isSelectionModeNotifier;
  /// –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  late ValueNotifier<Set<int>> _selectedMessageIdsNotifier;

  /// –ö–ª—é—á–∏
  /// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è GlobalKey –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  final Map<int, GlobalKey> _messageKeys = {};

  /// –°—Å—ã–ª–∫–∞ –Ω–∞ ChatProvider
  late ChatProvider _chatProvider;


  @override
  void initState() {
    super.initState();
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ValueNotifier
    _scrollController.addListener(_scrollListener);
    _messagesNotifier = ValueNotifier<List<Message>>([]);
    _isLoadingHistoryNotifier = ValueNotifier<bool>(false);
    _isLoadingMessagesNotifier = ValueNotifier<bool>(false);
    _isNewMessagesNotifier = ValueNotifier<bool>(false);
    _isSelectionModeNotifier = ValueNotifier<bool>(false);
    _selectedMessageIdsNotifier = ValueNotifier<Set<int>>({});
    _sendVisibilityNotifier = ValueNotifier<bool>(
        _textController.text.isNotEmpty || _fileItems.isNotEmpty);

    /// –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å –¥–ª—è TextField
    _focusNode.unfocus();

    /// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è TextField
    _textController.addListener(() {
      _sendVisibilityNotifier.value =
          _textController.text.isNotEmpty || _fileItems.isNotEmpty;
    });

    _future = _loadData();
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ChatProvider
    _chatProvider = Provider.of<ChatProvider>(context, listen: false);
    _chatProvider.addListener(_onChatProviderUpdate);
  }



  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    _chatProvider = Provider.of<ChatProvider>(context, listen: false);
  }


  @override
  void dispose() {
    /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    _renderStabilizationTimer?.cancel();
    _messageKeys.clear();
    _scrollController.removeListener(_scrollListener);
    _scrollController.dispose();
    _textController.dispose();
    _messagesNotifier.dispose();
    _isLoadingHistoryNotifier.dispose();
    _isLoadingMessagesNotifier.dispose();
    _isNewMessagesNotifier.dispose();
    _isSelectionModeNotifier.dispose();
    _selectedMessageIdsNotifier.dispose();
    _sendVisibilityNotifier.dispose();
    _focusNode.dispose();

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    _chatProvider.removeListener(_onChatProviderUpdate);

    // üöÄ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º currentChat –≤ ChatProvider
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _chatProvider.setCurrentChat(null);
    });

    super.dispose();
  }



  // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç ChatProvider
  void _onChatProviderUpdate() {
    if (_chatProvider.hasNewMessages && mounted && _chatId == _chatProvider.currentChatId) {
      debugPrint('PageChatMessages: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–∑—ã–≤–∞–µ–º _updateMessages');
      _updateMessages(true);
    }
  }


  /// –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–∏–∑, –µ—Å–ª–∏ –Ω–µ –≤–Ω–∏–∑—É
  void _scrollToBottom() {
    Future.delayed(
        const Duration(milliseconds: 500), ()
    {
      if (_scrollController.hasClients && mounted) {
        final position = _scrollController.position;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤–Ω–∏–∑—É (–¥–æ–ø—É—Å–∫ 10 –ø–∏–∫—Å–µ–ª–µ–π)
        if (position.pixels < position.maxScrollExtent - 10) {
          _scrollController.animateTo(
            position.maxScrollExtent,
            duration: Duration(milliseconds: 500),
            curve: Curves.fastOutSlowIn,
          );
        }
      }
    }
    );
  }






  Future<void> _loadData() async {
    _role = await getUserRole();
    _ssId = await readSecureData(SecureKey.ssId);
    _userId = await readSecureData(SecureKey.userId);
    _chatInfo = await _api.getInfo(
        ssId: _ssId, clientUserId: widget.contact.clientUserId);

    if (_chatInfo != null && _chatInfo!.success && _chatInfo!.result != null) {
      _chatId = _chatInfo!.result!.id;
      _isChatClosed = _chatInfo!.result!.isClosed;
      _allowByDoctor = _chatInfo!.result!.allowByDoctor;
      _allowByPatient = _chatInfo!.result!.allowByPatient;
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç, —Å–±—Ä–∞—Å—ã–≤–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π
      _chatProvider.setCurrentChat(_chatId);
    } else {
      _chatId = '';
      return;
    }

    _chatTemplates = await _api.getTemplates(ssId: _ssId);
    if (_chatTemplates != null &&
        _chatTemplates!.success &&
        _chatTemplates!.result != null) {
      _templates = _chatTemplates!.result!
          .where((e) => [1, 2].contains(e.messageType))
          .toList();
      _acceptMessage = _chatTemplates!.result!
          .where((e) => e.messageType == 3)
          .first
          .messages
          .first;
    }

    await _updateMessages(false);
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∏–∑—É –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    WidgetsBinding.instance.addPostFrameCallback((_) => _scrollToBottom());
  }






  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
  void _updateSendButtonVisibility() {
    _sendVisibilityNotifier.value = _textController.text.isNotEmpty || _fileItems.isNotEmpty;
  }

  /// –í—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  void _insertSortedMessage00(List<Message> messages, Message newMsg) {
    final insertIndex = messages.indexWhere((msg) => msg.id > newMsg.id);
    if (insertIndex == -1) {
      messages.add(newMsg);
    } else {
      messages.insert(insertIndex, newMsg);
    }
    if (!_messageKeys.containsKey(newMsg.id)) {
      _messageKeys[newMsg.id] = GlobalKey();
    }
  }





  Future<void> _updateMessages(bool showBanner) async {
    bool newMsgExists = false;
    bool hasChanges = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (_isLoadingMessagesNotifier.value) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    _isLoadingMessagesNotifier.value = true;
    final currentMessages = List<Message>.from(_messagesNotifier.value);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (—Ç–æ–ª—å–∫–æ isRead, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10)
    final dataUpdateMessages = await _api.getMessages(ssId: _ssId, chatId: _chatId, messageId: 0);
    if (dataUpdateMessages != null && dataUpdateMessages.success == true && dataUpdateMessages.result.messages.isNotEmpty) {
      final updateMessages = dataUpdateMessages.result.messages;

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ currentMessages (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é id)
      final lastTenMessages = currentMessages.length > 10
          ? currentMessages.sublist(currentMessages.length - 10)
          : currentMessages;

      // –£–¥–∞–ª—è–µ–º –∏–∑ currentMessages —Ç–æ–ª—å–∫–æ —Ç–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ updateMessages
      final updateMessageIds = updateMessages.map((e) => e.id).toSet();
      final removedMessages = lastTenMessages.where((msg) => !updateMessageIds.contains(msg.id)).toList();
      if (removedMessages.isNotEmpty) {
        currentMessages.removeWhere((msg) => removedMessages.any((e) => e.id == msg.id));
        hasChanges = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
        debugPrint('Removed messages: ${removedMessages.map((m) => m.id).toList()}');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      for (final updatedMsg in updateMessages) {
        final existingMsgIndex = currentMessages.indexWhere((msg) => msg.id == updatedMsg.id);
        if (existingMsgIndex != -1) {
          // –û–±–Ω–æ–≤–ª—è–µ–º isRead –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          currentMessages[existingMsgIndex] = currentMessages[existingMsgIndex].copyWith(
            isRead: updatedMsg.isRead,
          );
          hasChanges = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è isRead
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
          //_insertSortedMessage(currentMessages, updatedMsg);

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü, —Ç–∞–∫ –∫–∞–∫ GroupedListView —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç
          currentMessages.add(updatedMsg);

          // –û–±–Ω–æ–≤–ª—è–µ–º GlobalKey –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (!_messageKeys.containsKey(updatedMsg.id)) {
            _messageKeys[updatedMsg.id] = GlobalKey();
          }
          hasChanges = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —Ç–∞–∫ –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (!updatedMsg.isRead && updatedMsg.artritFromId != _userId) {
            newMsgExists = true;
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      _firstMessageId = dataUpdateMessages.result.firstMessageId ?? _firstMessageId;
      _lastMessageId = dataUpdateMessages.result.lastMessageId != null &&
          (_lastMessageId == 0 || dataUpdateMessages.result.lastMessageId! < _lastMessageId)
          ? dataUpdateMessages.result.lastMessageId!
          : _lastMessageId;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (mounted && hasChanges) {
      _messagesNotifier.value = List<Message>.from(currentMessages);
    }
    _isLoadingMessagesNotifier.value = false;

    bool isAtBottom = _scrollController.hasClients &&
        _scrollController.position.pixels >=
            _scrollController.position.maxScrollExtent - 100; // –î–æ–ø—É—Å–∫ 100 –ø–∏–∫—Å–µ–ª–µ–π

    if (isAtBottom && mounted) {
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–∑–Ω–∏–∑, –µ—Å–ª–∏ –±—ã–ª –ø–æ—á—Ç–∏ –≤–Ω–∏–∑—É
      _scrollToBottom();
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–Ω–∏–∑—É
    if (mounted && !isAtBottom && newMsgExists && _firstMessageId != 0 && showBanner) {
      _isNewMessagesNotifier.value = true;
    }

    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    DataResult3? readMsgResult = await _setAsRead();
    if (readMsgResult?.success == true && mounted) {
      // –û–±–Ω–æ–≤–ª—è–µ–º messageCount –≤ ChatProvider –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      await _chatProvider.onMessagesRead(context: context);
      _readMsg(isAwait: true);
    }
  }






  /// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  Future<void> _loadMsgHistory() async {
    if (_isLoadingHistoryNotifier.value) return;
    _isLoadingHistoryNotifier.value = true;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Ö–Ω–µ–º –≤–∏–¥–∏–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      final topMessageInfo = await Future.delayed(
        const Duration(milliseconds: 100),
        _getTopVisibleMessageInfo,
      );

      final dataHistoryMessages = await _api.getMessagesHistory(
        ssId: _ssId,
        lastMessageId: _lastMessageId,
        chatId: _chatId,
      );

      if (dataHistoryMessages != null && dataHistoryMessages.success == true) {
        final historyMessages = dataHistoryMessages.result.messages;
        final currentMessages = List<Message>.from(_messagesNotifier.value);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        // for (final historyMsg in historyMessages) {
        //   if (!currentMessages.any((e) => e.id == historyMsg.id)) {
        //     _insertSortedMessage(currentMessages, historyMsg);
        //     // –û–±–Ω–æ–≤–ª—è–µ–º GlobalKey –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        //     if (!_messageKeys.containsKey(historyMsg.id)) {
        //       _messageKeys[historyMsg.id] = GlobalKey();
        //     }
        //   }
        // }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (mounted) {
          _messagesNotifier.value = List<Message>.from([...historyMessages, ...currentMessages]);
        }
        _lastMessageId = dataHistoryMessages.result.lastMessageId ?? _lastMessageId;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        if (topMessageInfo != null && _scrollController.hasClients && mounted) {
          _renderStabilizationTimer?.cancel();
          _renderStabilizationTimer = Timer(const Duration(milliseconds: 300), () {
            if (!mounted || !_scrollController.hasClients) {
              debugPrint('Scroll restoration aborted: not mounted or no clients');
              return;
            }

            final messages = _messagesNotifier.value;
            final topMessageIndex = messages.indexWhere((msg) => msg.id == topMessageInfo.messageId);

            debugPrint('Restoring history scroll: topMessageId=${topMessageInfo.messageId}, index=$topMessageIndex');

            if (topMessageIndex != -1) {
              final key = _messageKeys[topMessageInfo.messageId];
              if (key != null && key.currentContext != null) {
                final renderBox = key.currentContext!.findRenderObject() as RenderBox?;
                if (renderBox != null) {
                  final newPosition = renderBox.localToGlobal(Offset.zero).dy;
                  final newOffset = (newPosition - topMessageInfo.offsetFromViewportTop).clamp(
                    _scrollController.position.minScrollExtent,
                    _scrollController.position.maxScrollExtent,
                  );
                  Future.delayed(Duration(milliseconds: 200));
                  _scrollController.jumpTo(newOffset);
                  debugPrint('Scrolled to message ID: ${topMessageInfo.messageId} at offset: $newOffset');
                  return;
                }
              }
            } else {
              // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
              debugPrint('Top message ID ${topMessageInfo.messageId} not found, maintaining position');
              _scrollController.jumpTo(_scrollController.offset);
            }
          });
        }
      } else {
        debugPrint('Failed to load message history: ${dataHistoryMessages?.userMessage}');
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
    } finally {
      _isLoadingHistoryNotifier.value = false;
    }

    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    DataResult3? readMsgResult = await _setAsRead();
    if (readMsgResult?.success == true && mounted) {
      // –û–±–Ω–æ–≤–ª—è–µ–º messageCount –≤ ChatProvider –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      await _chatProvider.onMessagesRead(context: context);
      _readMsg(isAwait: true);
    }
  }

  void _scrollListener() {
    if (_scrollController.position.pixels == _scrollController.position.minScrollExtent &&
        !_isLoadingHistoryNotifier.value) {
      final messages = _messagesNotifier.value;
      if (messages.isNotEmpty) {
        debugPrint('Scroll reached top, loading history for: $_lastMessageId');
        _loadMsgHistory();
      }
    }
  }








  /// –ó–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  Future<DataResult3?> _setAsRead() async {
    final messages = List<Message>.from(_messagesNotifier.value);
    if (messages.isEmpty) {
      debugPrint('–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç');
      return null;
    }
    List<int> unreadMessageIds = messages
        .where((e) => !e.isRead && e.artritFromId != _userId)
        .map((e) => e.id)
        .toList();
    if (unreadMessageIds.isNotEmpty) {
      DataResult3? result = await _api.setAsRead(
          ssId: _ssId, chatId: _chatId, thisData: unreadMessageIds);
      return result;
    }
    return null;
  }


  /// –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å
  /// 10 —Å–µ–∫—É–Ω–¥ –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã –Ω–∞–¥–ø–∏—Å—å "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" –Ω–µ –∏—Å—á–µ–∑–∞–ª–∞ —Å—Ä–∞–∑—É
  Future<void> _readMsg({required bool isAwait}) async {
    await Future.delayed(Duration(seconds: isAwait ? 10 : 0));
    final messages = List<Message>.from(_messagesNotifier.value);
    if (messages.isNotEmpty) {
      final updatedMessages = messages.map((e) {
        if (!e.isRead && e.artritFromId != _userId) {
          return Message(
            id: e.id,
            artritFromId: e.artritFromId,
            artritToId: e.artritToId,
            fromId: e.fromId,
            toId: e.toId,
            message: e.message,
            files: e.files,
            created: e.created,
            isRead: true,
          );
        }
        return e;
      }).toList();
      if (mounted) {
        _messagesNotifier.value = List<Message>.from(updatedMessages);
      }
    }
  }




  /// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Ö–Ω–µ–º –≤–∏–¥–∏–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  TopMessageInfo? _getTopVisibleMessageInfo() {
    if (!_scrollController.hasClients || _messagesNotifier.value.isEmpty) {
      return null;
    }

    final messages = _messagesNotifier.value;
    double minDistance = double.infinity;
    TopMessageInfo? topMessageInfo;

    for (final message in messages) {
      final key = _messageKeys[message.id];
      if (key == null || key.currentContext == null) continue;

      final renderBox = key.currentContext!.findRenderObject() as RenderBox?;
      if (renderBox == null) continue;

      final position = renderBox.localToGlobal(Offset.zero).dy;
      final messageHeight = renderBox.size.height;
      final viewportTop = _scrollController.position.pixels;
      final viewportBottom = viewportTop + _scrollController.position.viewportDimension;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
      if (position + messageHeight >= viewportTop && position <= viewportBottom) {
        final distance = (position - viewportTop).abs();
        if (distance < minDistance) {
          minDistance = distance;
          topMessageInfo = TopMessageInfo(
            messageId: message.id,
            offsetFromViewportTop: position - viewportTop,
            messageHeight: messageHeight,
          );
        }
      }
    }

    return topMessageInfo;
  }

















  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _sendMsg() async {
    if (_isLoadingMessagesNotifier.value) return;
    _isLoadingMessagesNotifier.value = true;
    _currentFileIndex = 0;
    if (_fileItems.isNotEmpty) _isFileSending = true;

    await _sendFile();

    /// –ï—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    if (!_fileItems.any((e) => !(e.isSendSuccess ?? true))) {
      DataChatAddMessage thisData = DataChatAddMessage(
        toId: Roles.asPatient.contains(_role)
            ? _chatInfo!.result!.doctorId
            : _chatInfo!.result!.patientId,
        message: _textController.text,
        files: _fileElements,
      );

      DataChatMessage? newMessage = await _api.addMessage(
        ssId: _ssId,
        chatId: _chatId,
        thisData: thisData,
      );

      final currentMessages = List<Message>.from(_messagesNotifier.value);

      if (newMessage != null && newMessage.success) {
        //_insertSortedMessage(currentMessages, newMessage.result);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü, —Ç–∞–∫ –∫–∞–∫ GroupedListView —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç
        currentMessages.add(newMessage.result);

        await _updateMessages(false);

        if (mounted) {
          _messagesNotifier.value = List<Message>.from(currentMessages);
        }
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∏–∑—É –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        WidgetsBinding.instance.addPostFrameCallback((_) => _scrollToBottom());

        setState(() {
          _textController.clear();
          _fileItems = [];
          _fileElements = [];
        });
      } else {
        ShowMessage.show(
            context: context,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É');
      }
    } else {
      if (mounted) {
        ShowMessage.show(
            context: context,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '
                '${_fileItems.where((e) => !(e.isSendSuccess ?? true)).length > 1
                ? '—Ñ–∞–π–ª—ã: \n-' : '—Ñ–∞–π–ª'} ${(_fileItems.where((e) => !(e.isSendSuccess ?? true))
                .map((e) => e.fileName)).join(',\n- ')}\n______________________\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É');
      }
    }

    await _setAsRead();
    setState(() {
      _isFileSending = false;
      _isLoadingMessagesNotifier.value = false;
    });
  }


  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  Future<void> _sendFile() async {
    if (_fileItems.isNotEmpty) {
      //int jj = 0;
      for (FileItems items in _fileItems) {
        if (!(items.isSendSuccess ?? false)) {
          DataChatFileSend? thisFileData = await _api.addFile(
              ssId: _ssId, chatId: _chatId, filePath: items.file.path);

          if (thisFileData != null && thisFileData.success) {
            _fileElements.add(FileElement(
                name: thisFileData.result.filename,
                url: thisFileData.result.idStr));

            /// –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            // if(jj == 0 || jj == 1) {
            //   items.isSendSuccess = false;
            // } else {
            //   items.isSendSuccess = true;
            // }
            // jj++;

            /// –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ
            items.isSendSuccess = true;
            setState(() {
              _currentFileIndex++;
              _progress = _currentFileIndex / _fileItems.length;
            });
          } else {
            /// –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            items.isSendSuccess = false;
          }
        }
      }
    }
  }




  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å
        _focusNode.unfocus();
      },
      child: Scaffold(
        appBar: AppBarWidget(
          title: widget.contact.userFio ?? '',
        ),
        endDrawer: const MenuDrawer(),
        resizeToAvoidBottomInset: true, // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        body: FutureBuilder(
          future: _future,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            } else if (snapshot.hasError) {
              return errorDataWidget(snapshot.error);
            }

            return ValueListenableBuilder<List<Message>?>(
                valueListenable: _messagesNotifier,
                builder: (context, messages, child) {
                  return Stack(
                    children: [
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 5.0),
                        child: Column(
                          children: [
                            Expanded(
                              child: Scrollbar(
                                controller: _scrollController,
                                thumbVisibility: false, // –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                                child: Stack(
                                  children: [
                                    _buildChatContent(messages),
                                    /// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                    Positioned(
                                      top: 3,
                                      left: 5,
                                      child: ValueListenableBuilder<bool>(
                                        valueListenable: _isNewMessagesNotifier,
                                        builder: (context, isLoading, child) {
                                          return isLoading
                                              ? Center(child: Card(color: Colors.white, child: Padding(
                                            padding: EdgeInsets.fromLTRB(10.0, 0.0, 4.0, 0.0),
                                            child: Row(
                                              mainAxisSize: MainAxisSize.min,
                                              mainAxisAlignment: MainAxisAlignment.center,
                                              crossAxisAlignment: CrossAxisAlignment.center,
                                              children: [
                                                Text('–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', style: chatTimeStyle,),
                                                TextButton(onPressed: () {
                                                  _scrollController.animateTo(
                                                    _scrollController.position.maxScrollExtent,
                                                    duration: const Duration(milliseconds: 300),
                                                    curve: Curves.easeOut,
                                                  );
                                                  _isNewMessagesNotifier.value = false;
                                                }, child: Text('–ü–µ—Ä–µ–π—Ç–∏', style: TextStyle(fontSize: 13),))
                                              ],
                                            ),
                                          ))) : const SizedBox.shrink();
                                        },
                                      ),
                                    ),
                                    /// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                                    Positioned(
                                      top: 3,
                                      left: 5,
                                      child: ValueListenableBuilder<bool>(
                                        valueListenable: _isLoadingHistoryNotifier,
                                        builder: (context, isLoading, child) {
                                          return isLoading
                                              ? const Center(child: Card(color: Colors.white, child: Padding(
                                            padding: EdgeInsets.symmetric(vertical: 4.0, horizontal: 8.0),
                                            child: Text('–ó–∞–≥—Ä—É–∑–∫–∞...', style: chatTimeStyle,),
                                          ))) : const SizedBox.shrink();
                                        },
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),

                            _buildBottomPanel(context, messages),
                            SizedBox(
                              height: 10,
                            ),
                          ],
                        ),
                      ),

                      /// –í—ã–∑–æ–≤ –æ–ø—Ü–∏–π —á–∞—Ç–∞
                      GestureDetector(
                        onTap: () => ChatOptionsMenu.show(
                            context: context,
                            chatId: _chatId,
                            role: _role,
                            isChatClose: _isChatClosed,
                            onShowPolicy: _onShowPolicy,
                            onCloseChat: _onCloseChat,
                            onOpenChat: _onOpenChat),
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Align(
                            alignment: Alignment.topRight,
                            child: Icon(Icons.more_vert),
                          ),
                        ),
                      ),
                    ],
                  );
                });
          },
        ),
      ),
    );
  }






  /// –°–æ–∑–¥–∞—ë—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞
  Widget _buildChatContent(List<Message>? messages) {
    /// –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ª–æ–≤–∏—è —á–∞—Ç–∞
    if (((Roles.asDoctor.contains(_role) && !_allowByDoctor) || (Roles.asPatient.contains(_role) && !_allowByPatient)) &&
        !_isChatClosed) {
      return ChatPolitic(onConfirm: _onShowPolicy, showAgreeBtn: true);
    } else if (messages == null || messages.isEmpty) {
      return const Center(child: Text('–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç'));
    } else {
      return GroupedListView<Message, DateTime>(
        controller: _scrollController,
        physics: const BouncingScrollPhysics(),
        cacheExtent: 10000,
        useStickyGroupSeparators: true,
        stickyHeaderBackgroundColor: Colors.white,
        floatingHeader: true,
        elements: messages,
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        groupBy: (message) => DateTime(message.created.year, message.created.month, message.created.day),
        groupHeaderBuilder: (message) => ChatDividerWidget(messageDate: message.created),
        itemBuilder: (context, message) {
          if (!_messageKeys.containsKey(message.id)) {
            _messageKeys[message.id] = GlobalKey();
          }
          return Column(
            key: _messageKeys[message.id],
            children: [
              ChatDividerNewMessageWidget(
                messages: messages,
                messageIndex: messages.indexOf(message),
                isRead: message.isRead,
                userId: _userId,
              ),
              _messageWidget(message: message),
            ],
          );
        },
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
        // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        sort: true,
        //sort: false,
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø –ø–æ id
        itemComparator: (item1, item2) => item1.id.compareTo(item2.id),
        // –ì—Ä—É–ø–ø—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã (—É–∂–µ –∑–∞–¥–∞–Ω–æ –≤ groupBy –∏ order)
        order: GroupedListOrder.ASC,
      );
    }
  }









  /// –°–æ–∑–¥–∞—ë—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –≤–≤–æ–¥–æ–º
  Widget _buildBottomPanel(BuildContext context, List<Message>? messages) {
    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).orientation == Orientation.portrait
            ? double.infinity : 100.0,
      ),
      child: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            /// –õ–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            ChatFilePreviewWidget(
              fileItems: _fileItems,
              isFileSendLoading: _isFileSending,
              sendVisibilityNotifier: _sendVisibilityNotifier,
              controllerText: _textController.text,
              onRemoveFile: _removeFile,
            ),
            /// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
            if (_isFileSending)
              ChatFileUploadProgressWidget(
                progress: _progress,
                currentFileIndex: _currentFileIndex,
                totalFiles: _fileItems.length,
              ),
            /// –ü–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            _deleteMsgPanel(),
            /// –í–∏–¥–∂–µ—Ç –±–∞–Ω–Ω–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
            ChatStatusBanner(
              isChatClosed: _isChatClosed,
              allowByDoctor: _allowByDoctor,
              allowByPatient: _allowByPatient,
              role: _role,
            ),
            /// –í–∏–¥–∂–µ—Ç –ø–∞–Ω–µ–ª–∏ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç –∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è
            if (!_isChatClosed && ((Roles.asDoctor.contains(_role) && _allowByDoctor) || (Roles.asPatient.contains(_role) && _allowByPatient)))
              ChatMessageInputPanel(
                textController: _textController,
                focusNode: _focusNode,
                onAddFile: _onAddFile,
                onShowTemplates: _showTemplatesDialog,
                onSend: _sendMsg,
                sendVisibility: _sendVisibilityNotifier,
                scrollToBottom: _scrollToBottom,
              ),
          ],
        ),
      ),
    );
  }






  /// –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ª–µ–Ω—Ç—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
  void _removeFile(int index) {
    if (mounted) {
      setState(() {
        _fileItems.removeAt(index);
        _updateSendButtonVisibility();
      });
    }
  }



  /// –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  Widget _messageWidget({
    required Message message,
  }) {
    return ValueListenableBuilder<Set<int>>(
        valueListenable: _selectedMessageIdsNotifier,
        builder: (context, selectedMessageIds, child) {
          return ValueListenableBuilder<bool>(
              valueListenable: _isSelectionModeNotifier,
              builder: (context, isSelectionMode, child) {
                return ChatMessageWidget(
                  message: message,
                  userId: _userId,
                  thisDataChatInfo: _chatInfo,
                  showContextMenu: _showContextMenuMessage,
                  isSelectionMode: isSelectionMode,
                  isSelected: selectedMessageIds.contains(message.id),
                  acceptMsg: _acceptMessage,
                  onToggleSelection: (messageId) {
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    FocusScope.of(context).unfocus();
                    final updatedIds = Set<int>.from(selectedMessageIds);
                    if (updatedIds.contains(messageId)) {
                      updatedIds.remove(messageId);
                    } else {
                      updatedIds.add(messageId);
                    }
                    _selectedMessageIdsNotifier.value = updatedIds;
                  },
                );
              });
        });
  }




  /// –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ FilePicker
  Future<void> _onAddFile() async {
    FilePickerWidget(
      isVideo: true,
      onlyOneFile: false,
      onFileUploaded: (files) {
        if (mounted) {
          setState(() {
            _fileItems.addAll(files);
            _updateSendButtonVisibility();
          });
        }
      },
      onLoadingChanged: (value) {
        if (mounted) setState(() {});
      },
    ).showPicker(context);
  }



  /// –ü–∞–Ω–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  Widget _deleteMsgPanel() {
    return ValueListenableBuilder<bool>(
      valueListenable: _isSelectionModeNotifier,
      builder: (context, isSelectionMode, child) {
        if (!isSelectionMode) return const SizedBox.shrink();
        return ValueListenableBuilder<Set<int>>(
          valueListenable: _selectedMessageIdsNotifier,
          builder: (context, selectedMessageIds, child) {
            return Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              color: Colors.grey.shade200,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text('–í—ã–±—Ä–∞–Ω–æ: ${selectedMessageIds.length}', style: const TextStyle(fontWeight: FontWeight.bold)),
                  Row(
                    children: [
                      TextButton(
                        onPressed: () {
                          _isSelectionModeNotifier.value = false;
                          _selectedMessageIdsNotifier.value = {};
                          _focusNode.unfocus();
                        },
                        child: const Text('–û—Ç–º–µ–Ω–∞'),
                      ),
                      TextButton(
                        onPressed: selectedMessageIds.isNotEmpty ? () => _deleteMsg(selectedMessageIds.toList()) : null,
                        child: const Text('–£–¥–∞–ª–∏—Ç—å'),
                      ),
                    ],
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }




  /// –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  Future<void> _deleteMsg(List<int> msgIds) async {
    ShowDialogConfirm.show(
      context: context,
      message: '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${msgIds.length} —Å–æ–æ–±—â–µ–Ω–∏–π?',
      onConfirm: () async {
        final result = await _api.deleteMessage(ssId: _ssId, chatId: _chatId, msgId: msgIds);
        final userMessage = result.success
            ? (msgIds.length > 1 ? '–°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã' : '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
            : result.userMessage ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        if (result.success) {
          _isSelectionModeNotifier.value = false;
          _selectedMessageIdsNotifier.value = {};
          final currentMessages = List<Message>.from(_messagesNotifier.value);
          currentMessages.removeWhere((msg) => msgIds.any((e) => e == msg.id));
          if (mounted) {
            _messagesNotifier.value = List<Message>.from(currentMessages);
          }
          await _updateMessages(true);
        }
        showBottomBanner(context: context, message: userMessage, seconds: 1);
      },
    );
  }


  /// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<void> _onDelete({required Message message}) async {
    _focusNode.unfocus();
    if (_acceptMessage == message.message) {
      showBottomBanner(
          context: context, message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    } else {
      _isSelectionModeNotifier.value = true;
      _selectedMessageIdsNotifier.value = {message.id};
    }
  }

  /// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<void> _onCopy({required Message message}) async {
    _focusNode.unfocus();
    Clipboard.setData(ClipboardData(text: message.message));
    if (mounted) {
      showBottomBanner(
          context: context, message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', seconds: 1);
    }
  }

  /// –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  Future<void> _onDownload({
    required Message message,
  }) async {
    // –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å —Å TextField
    _focusNode.unfocus();
    for (FileElement file in message.files) {
      await downloadFile(
          fileName: file.name,
          fileId: file.url,
          context: context,
          isChatFiles: true,
          chatId: _chatId);
      debugPrint('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ${file.name}');
    }
  }

  /// –°–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π —á–∞—Ç–∞
  Future<void> _onShowPolicy() async {
    DataChatInfo? result = await _api.allowChat(ssId: _ssId, chatId: _chatId);
    if (result != null && result.success) {
      showBottomBanner(context: context, message: '–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–æ–ª–∏—Ç–∏–∫—É —á–∞—Ç–∞');
      _textController.text = _acceptMessage;
      _sendMsg();
      setState(() {
        if (Roles.asDoctor.contains(_role)) {
          _allowByDoctor = result.result!.allowByDoctor;
        } else if (Roles.asPatient.contains(_role)) {
          _allowByPatient = result.result!.allowByPatient;
        }
      });
    } else {
      showBottomBanner(context: context,
          message: result?.userMessage ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }

  /// –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç
  Future<void> _onCloseChat() async {
    ShowDialogConfirm.show(
      context: context,
      title: '–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç',
      message:
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —á–∞—Ç? –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –í–∞–º.',
      onConfirm: () async {
        DataChatInfo? result =
        await _api.closeChat(ssId: _ssId, chatId: _chatId);
        if (result != null && result.success) {
          showBottomBanner(context: context, message: '–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç');
          setState(() {
            _isChatClosed = result.result!.isClosed;
          });
        } else {
          showBottomBanner(
              context: context,
              message: result?.userMessage ?? '–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞');
        }
      },
    );
  }

  /// –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
  Future<void> _onOpenChat() async {
    ShowDialogConfirm.show(
      context: context,
      title: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç',
      message: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?',
      onConfirm: () async {
        DataChatInfo? result =
        await _api.openChat(ssId: _ssId, chatId: _chatId);
        if (result != null && result.success) {
          showBottomBanner(context: context, message: '–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç');
          setState(() {
            _isChatClosed = result.result!.isClosed;
          });
        } else {
          showBottomBanner(
              context: context,
              message: result?.userMessage ?? '–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞');
        }
      },
    );
  }



  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _showContextMenuMessage(
      BuildContext context, Message message, GlobalKey messageKey) async {
    // –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å —Å TextField
    _focusNode.unfocus();
    final messageContext = messageKey.currentContext;
    if (messageContext == null) {
      debugPrint('–û—à–∏–±–∫–∞: messageContext –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    final RenderBox? messageBox =
    messageContext.findRenderObject() as RenderBox?;
    if (messageBox == null) {
      debugPrint('–û—à–∏–±–∫–∞: messageBox –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    final position = messageBox.localToGlobal(Offset.zero);
    final messageHeight = messageBox.size.height;
    final screenHeight = MediaQuery.of(context).size.height;

    const menuHeightEstimate = 100.0;
    bool showAbove =
        (position.dy + messageHeight + menuHeightEstimate) > screenHeight;

    final result = await showMenu(
      context: context,
      color: Colors.white,
      elevation: 12,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      position: RelativeRect.fromLTRB(
        position.dx,
        showAbove
            ? position.dy - menuHeightEstimate
            : position.dy + messageHeight,
        position.dx + messageBox.size.width,
        showAbove ? position.dy : screenHeight,
      ),
      items: [
        if (message.message.isNotEmpty)
          PopupMenuItem<String>(
            value: 'copy',
            child: Row(
              children: [
                Icon(Icons.copy, size: 20, color: btnColor),
                const SizedBox(width: 8),
                const Text('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç'),
              ],
            ),
          ),
        if (message.files.isNotEmpty)
          PopupMenuItem<String>(
            value: 'download',
            child: Row(
              children: [
                Icon(Icons.download, size: 20, color: btnColor),
                const SizedBox(width: 8),
                Text(message.files.length == 1
                    ? '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª'
                    : '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã'),
              ],
            ),
          ),
        if (message.artritFromId == _userId)
          PopupMenuItem<String>(
            value: 'delete',
            child: Row(
              children: [
                Icon(Icons.delete, size: 20, color: redBtnColor),
                const SizedBox(width: 8),
                const Text('–£–¥–∞–ª–∏—Ç—å'),
              ],
            ),
          ),
      ],
    );

    if (result != null) {
      switch (result) {
        case 'copy':
          await _onCopy(message: message);
          break;
        case 'download':
          await _onDownload(message: message);
          break;
        case 'delete':
          await _onDelete(message: message);
          break;
      }
    }
  }

  /// –î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
  void _showTemplatesDialog() {
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    final selectedMessages = <String>{};

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ TextField
    final currentTextLines = _textController.text
        .split('\n')
        .where((line) => line.isNotEmpty)
        .map((line) => line.trim()) // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        .toList();
    for (var template in _templates) {
      for (var message in template.messages) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–∞–∫–∞—è-–ª–∏–±–æ —Å—Ç—Ä–æ–∫–∞ —à–∞–±–ª–æ–Ω
        if (currentTextLines.any((line) => line.contains(message))) {
          selectedMessages.add(message);
        }
      }
    }
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã'),
          content: StatefulBuilder(
            builder: (context, setDialogState) {
              return SizedBox(
                width: double.maxFinite,
                child: _templates.isEmpty
                    ? const Text('–®–∞–±–ª–æ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
                    : SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: _templates.expand((template) {
                      return [
                        Padding(
                          padding: const EdgeInsets.symmetric(
                              vertical: 8.0, horizontal: 16.0),
                          child: Text(
                            template.messageTypeStr ?? '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                          ),
                        ),
                        ...template.messages.map((message) {
                          final isSelected =
                          selectedMessages.contains(message);
                          return CheckboxListTile(
                            title: Text(message),
                            value: isSelected,
                            onChanged: (bool? value) {
                              setDialogState(() {
                                if (value == true) {
                                  selectedMessages.add(message);
                                } else {
                                  selectedMessages.remove(message);
                                }
                              });

                              // –û–±–Ω–æ–≤–ª—è–µ–º TextField
                              final currentLines = _textController.text
                                  .split('\n')
                                  .where((line) => line.isNotEmpty)
                                  .toList();
                              if (value == true) {
                                // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                                if (!currentLines.any(
                                        (line) => line.contains(message))) {
                                  currentLines.add(message);
                                }
                              } else {
                                // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω—É
                                for (int i = 0;
                                i < currentLines.length;
                                i++) {
                                  if (currentLines[i].contains(message)) {
                                    currentLines[i] = currentLines[i]
                                        .replaceFirst(message, '');
                                  }
                                }

                                // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                                currentLines.removeWhere(
                                        (line) => line.trim().isEmpty);
                              }
                              _textController.text =
                                  currentLines.join('\n');
                              _textController.selection =
                                  TextSelection.fromPosition(
                                    TextPosition(
                                        offset: _textController.text.length),
                                  );
                            },
                          );
                        }),
                      ];
                    }).toList(),
                  ),
                ),
              );
            },
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('–ì–æ—Ç–æ–≤–æ'),
            ),
          ],
        );
      },
    );
  }
}






/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Ö–Ω–µ–º –≤–∏–¥–∏–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
class TopMessageInfo {
  final int messageId;
  final double offsetFromViewportTop; // –°–º–µ—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  final double messageHeight; // –í—ã—Å–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

  TopMessageInfo({
    required this.messageId,
    required this.offsetFromViewportTop,
    required this.messageHeight,
  });
}


